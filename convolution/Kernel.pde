import java.util.List;

public class Kernel implements Agent {
  private final Color[] values;
  private final int side;
  private ValueCombiner combiner;
  private Kernel(Color[] values, int side, ValueCombiner combiner) {
    this.values = values;
    this.side = side;
    this.combiner = combiner;
  }
  public int getSide() {
    return side;
  }
  public Color getColor(int x, int y) {
    int where = x + (y * side);
    return values[where];
  }
  private Color process(int x, int y, Color surfaceColor) {
    var kernelColor = getColor(x, y);
    return combiner.nowKiss(surfaceColor, kernelColor);
  }
  Color process(int surfaceX, int surfaceY, Surface surface, OutOfBoundsStrategy outOfBoundsStrategy) {
    Color collector = new Color(0, 0, 0);
    var kernelOffset = side/2;
    for (var kY = 0; kY < side; kY++) {
      for (var kX = 0; kX < side; kX++) {
        var surfaceSampleX = surfaceX + kX - kernelOffset;
        var surfaceSampleY = surfaceY + kY - kernelOffset;
        var sampledColor = outOfBoundsStrategy.correct(surfaceSampleX, surfaceSampleY, surface);
        var processedColor = process(kX, kY, sampledColor);
        collector = collector.add(processedColor);
      }
    }
    return collector;
  }
}

public Kernel kernelFromArray(double[][] values, ValueCombiner combiner) {
  var side = values.length;
  var arrayLength = side * side;
  var colors = new Color[arrayLength];
  for (int y = 0; y < side; y++) {
    for (int x = 0; x < side; x++) {
      int i = (y * side) + x;
      var val = values[y][x];
      var vColor = new Color(val, val, val);
      colors[i] = vColor;
    }
  }
  return new Kernel(colors, side, combiner);
}




final Kernel EMBOSS7 = kernelFromArray(
  new double[][]{{-0.05376737381126555,-0.07681053401609364,-0.06400877834674469,-0.03584491587417703,-0.012801755669348939,-0.002560351133869788,0.0},{-0.07681053401609364,-0.10960741282613996,-0.09083150451109485,-0.049500121921482565,-0.015240185320653498,0.0,0.002560351133869788},{-0.06400877834674469,-0.09083150451109485,-0.07315288953913679,-0.03413801511826384,0.0,0.015240185320653498,0.012801755669348939},{-0.03584491587417703,-0.049500121921482565,-0.03413801511826384,0.0,0.03413801511826384,0.049500121921482565,0.03584491587417703},{-0.012801755669348939,-0.015240185320653498,0.0,0.03413801511826384,0.07315288953913679,0.09083150451109485,0.06400877834674469},{-0.002560351133869788,0.0,0.015240185320653498,0.049500121921482565,0.09083150451109485,0.10960741282613996,0.07681053401609364},{0.0,0.002560351133869788,0.012801755669348939,0.03584491587417703,0.06400877834674469,0.07681053401609364,0.05376737381126555}},
  MULTIPLICATION_VALUE_COMBINER
);
final Kernel EMBOSS11 = kernelFromArray(
  new double[][]{{-0.019645504897999332,-0.03183277619999173,-0.03345617720353898,-0.0268214078846937,-0.0170810018634102,-0.008681666236361381,-0.0034585499640789243,-0.0010352122341460725,-2.1174795698442395E-4,-2.3527550776047105E-5,0.0},{-0.03183277619999173,-0.05158050619285993,-0.05421077366279193,-0.04345907743204363,-0.02767321792961667,-0.014057021259353998,-0.005583637244952544,-0.0016452943052873564,-3.0304048933698995E-4,0.0,2.3527550776047105E-5},{-0.03345617720353898,-0.05421077366279193,-0.056973387127927634,-0.0456655390442241,-0.02905156610789532,-0.014691250768836685,-0.005705783272035376,-0.001473867216758649,0.0,3.0304048933698995E-4,2.1174795698442395E-4},{-0.0268214078846937,-0.04345907743204363,-0.0456655390442241,-0.0365638989823334,-0.023137923264512757,-0.011395336760541407,-0.003821775900670569,0.0,0.001473867216758649,0.0016452943052873564,0.0010352122341460725},{-0.0170810018634102,-0.02767321792961667,-0.02905156610789532,-0.023137923264512757,-0.014242395818103236,-0.00601998173754879,0.0,0.003821775900670569,0.005705783272035376,0.005583637244952544,0.0034585499640789243},{-0.008681666236361381,-0.014057021259353998,-0.014691250768836685,-0.011395336760541407,-0.00601998173754879,0.0,0.00601998173754879,0.011395336760541407,0.014691250768836685,0.014057021259353998,0.008681666236361381},{-0.0034585499640789243,-0.005583637244952544,-0.005705783272035376,-0.003821775900670569,0.0,0.00601998173754879,0.014242395818103236,0.023137923264512757,0.02905156610789532,0.02767321792961667,0.0170810018634102},{-0.0010352122341460725,-0.0016452943052873564,-0.001473867216758649,0.0,0.003821775900670569,0.011395336760541407,0.023137923264512757,0.0365638989823334,0.0456655390442241,0.04345907743204363,0.0268214078846937},{-2.1174795698442395E-4,-3.0304048933698995E-4,0.0,0.001473867216758649,0.005705783272035376,0.014691250768836685,0.02905156610789532,0.0456655390442241,0.056973387127927634,0.05421077366279193,0.03345617720353898},{-2.3527550776047105E-5,0.0,3.0304048933698995E-4,0.0016452943052873564,0.005583637244952544,0.014057021259353998,0.02767321792961667,0.04345907743204363,0.05421077366279193,0.05158050619285993,0.03183277619999173},{0.0,2.3527550776047105E-5,2.1174795698442395E-4,0.0010352122341460725,0.0034585499640789243,0.008681666236361381,0.0170810018634102,0.0268214078846937,0.03345617720353898,0.03183277619999173,0.019645504897999332}},
  MULTIPLICATION_VALUE_COMBINER
);
final Kernel CHROMATIC_ABBERATION_5 = new Kernel(
  new Color[]{
    COLOR_BLACK, COLOR_BLACK, COLOR_BLACK, COLOR_BLACK, COLOR_BLACK, 
    COLOR_BLACK, COLOR_BLACK, COLOR_BLACK, COLOR_BLACK, COLOR_BLACK, 
    COLOR_BLUE, COLOR_BLACK, COLOR_GREEN, COLOR_BLACK, COLOR_RED, 
    COLOR_BLACK, COLOR_BLACK, COLOR_BLACK, COLOR_BLACK, COLOR_BLACK, 
    COLOR_BLACK, COLOR_BLACK, COLOR_BLACK, COLOR_BLACK, COLOR_BLACK
  },
  5,
  MULTIPLICATION_VALUE_COMBINER
);
